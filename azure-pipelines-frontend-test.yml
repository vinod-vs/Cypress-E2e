# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

parameters:
  - name: browser
    displayName: Browser
    type: string
    default: electron
    values:
      - chrome
      - edge
      - firefox
      - electron

  - name: tagsB2C
    displayName: B2C Test Tags
    type: string
    default: B2C-E2E

  - name: tagsB2B
    displayName: B2B Test Tags
    type: string
    default: B2B-E2E

  - name: otpValidationSwitch
    displayName: One Time Password Validation Switch
    type: string
    default: true
    values:
      - true
      - false

trigger: none

resources:
  pipelines:
    - pipeline: WFE_Cypress_Automation_Test
      source: Woolworths.Frontend
      project: Trader
      trigger: 
        stages:
        - Deploy_UAT_AAE

jobs:
  - job: Run_B2C_E2E_Tests
    displayName: "Install Node.js and run B2C E2E tests"
    pool:
      name: wlx-ubuntu1804
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "14.x"
        displayName: "Find or download node 14"
      - script: |
          npm install
          npm test -- --env tags=${{ parameters.tagsB2C }},fileConfig=b2c,otpValidationSwitch=${{ parameters.otpValidationSwitch }},creditCard='{"aa":"$(cc_number)","bb":"$(cc_cvv)","dd":"12","ee":"25","save":false,"verify":false}',gc_number="'$(gc_number)'",gc_pin="$(gc_pin)" --browser ${{ parameters.browser }}
        displayName: "Npm install and run B2C UI E2E tests"

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: "JUnit"
          testResultsFiles: "**/results-*.xml"
          testRunTitle: $(B2CTestRunTitle)
          mergeTestResults: true
          searchFolder: "$(System.DefaultWorkingDirectory)/cypress/results"
        displayName: "Publish Test Results"

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $minLastUpdatedDate = Get-Date (Get-Date).AddDays(-1) -Format s
            $maxLastUpdatedDate = Get-Date -Format s
            $queryString = "runTitle=$(B2CTestRunTitle)&minLastUpdatedDate=$minLastUpdatedDate&maxLastUpdatedDate=$maxLastUpdatedDate&buildIds=$(Build.BuildId)&api-version=6.0&`$top=1";
            $testRuns = Invoke-RestMethod -Uri "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/test/runs?$queryString" `
              -Method Get `
              -UseBasicParsing `
              -Authentication Bearer `
              -Token (ConvertTo-SecureString -String $(System.AccessToken) -AsPlainText -Force)
        
            $testRun = $testRuns.value[0]
            if ($testRun) {
              $testRunId = $testRun.id;
              $testResultDetailsUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_testManagement/runs?_a=runCharts&runId=$testRunId"
        
              $passedCount = ($testRun.runStatistics | Where-Object {$_.outcome -eq 'Passed'}).count
              $failedCount = ($testRun.runStatistics | Where-Object {$_.outcome -eq 'Failed'}).count
              $totalCount = $passedCount + $failedCount
              if ($totalCount -le 0) {
                return
              }
              $passRate = [math]::Round($passedCount / $totalCount * 100, 2)
              $color = 'good';
              if ($passRate -lt 50) {
                $color = 'danger';
                Write-Host "##vso[task.logissue type=error]Pass rate below 50% at $passRate% while testing on uat site"
              } elseif ($passRate -lt 90) {
                $color = 'warning';
                Write-Host "##vso[task.logissue type=warning]Pass rate $passRate% while testing on uat site"
              }
        
              $slackMessage = @{
                  attachments = @(
                    @{
                      fallback = $testRun.name + " : Pass percentage $passRate%"
                      title = $testRun.name
                      title_link = $testResultDetailsUrl
                      color = $color
                      fields = @(
                          @{title = 'Passed - Scenarios'; value = $passedCount; short = 'true'},
                          @{title = 'Failed - Scenarios'; value = $failedCount; short = 'true'},
                          @{title = 'Total - Scenarios'; value = $totalCount; short = 'true'},
                          @{title = 'Pass percentage'; value = "$passRate%"; short = 'true'}
                      )
                    }
                  )
              } | ConvertTo-Json -Depth 5
        
              Invoke-RestMethod -Uri '$(SlackWebhookUrl)' `
                -Method Post `
                -Body $slackMessage `
                -UseBasicParsing `
                -ContentType 'application/json'
            }
        displayName: 'Send Slack Notification'
        condition: succeededOrFailed()

  - job: Run_B2B_E2E_Tests
    displayName: "Install Node.js and run B2B E2E tests"
    pool:
      name: wlx-ubuntu1804
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "14.x"
        displayName: "Find or download node 14"
      - script: |
          npm install
          npm test -- --env tags=${{ parameters.tagsB2B }},fileConfig=b2b,otpValidationSwitch=false,creditCard='{"aa":"$(cc_number)","bb":"$(cc_cvv)","dd":"12","ee":"25","save":false,"verify":false}',gc_number="'$(gc_number)'",gc_pin="$(gc_pin)" --browser ${{ parameters.browser }}
        displayName: "Npm install and run B2B UI E2E tests"

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: "JUnit"
          testResultsFiles: "**/results-*.xml"
          testRunTitle: $(B2BTestRunTitle)
          mergeTestResults: true
          searchFolder: "$(System.DefaultWorkingDirectory)/cypress/results"
        displayName: "Publish Test Results"

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $minLastUpdatedDate = Get-Date (Get-Date).AddDays(-1) -Format s
            $maxLastUpdatedDate = Get-Date -Format s
            $queryString = "runTitle=$(B2BTestRunTitle)&minLastUpdatedDate=$minLastUpdatedDate&maxLastUpdatedDate=$maxLastUpdatedDate&buildIds=$(Build.BuildId)&api-version=6.0&`$top=1";
            $testRuns = Invoke-RestMethod -Uri "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/test/runs?$queryString" `
              -Method Get `
              -UseBasicParsing `
              -Authentication Bearer `
              -Token (ConvertTo-SecureString -String $(System.AccessToken) -AsPlainText -Force)
        
            $testRun = $testRuns.value[0]
            if ($testRun) {
              $testRunId = $testRun.id;
              $testResultDetailsUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_testManagement/runs?_a=runCharts&runId=$testRunId"
        
              $passedCount = ($testRun.runStatistics | Where-Object {$_.outcome -eq 'Passed'}).count
              $failedCount = ($testRun.runStatistics | Where-Object {$_.outcome -eq 'Failed'}).count
              $totalCount = $passedCount + $failedCount
              if ($totalCount -le 0) {
                return
              }
              $passRate = [math]::Round($passedCount / $totalCount * 100, 2)
              $color = 'good';
              if ($passRate -lt 50) {
                $color = 'danger';
                Write-Host "##vso[task.logissue type=error]Pass rate below 50% at $passRate% while testing on uat site"
              } elseif ($passRate -lt 90) {
                $color = 'warning';
                Write-Host "##vso[task.logissue type=warning]Pass rate $passRate% while testing on uat site"
              }
        
              $slackMessage = @{
                  attachments = @(
                    @{
                      fallback = $testRun.name + " : Pass percentage $passRate%"
                      title = $testRun.name
                      title_link = $testResultDetailsUrl
                      color = $color
                      fields = @(
                          @{title = 'Passed - Scenarios'; value = $passedCount; short = 'true'},
                          @{title = 'Failed - Scenarios'; value = $failedCount; short = 'true'},
                          @{title = 'Total - Scenarios'; value = $totalCount; short = 'true'},
                          @{title = 'Pass percentage'; value = "$passRate%"; short = 'true'}
                      )
                    }
                  )
              } | ConvertTo-Json -Depth 5
        
              Invoke-RestMethod -Uri '$(SlackWebhookUrl)' `
                -Method Post `
                -Body $slackMessage `
                -UseBasicParsing `
                -ContentType 'application/json'
            }
        displayName: 'Send Slack Notification'
        condition: succeededOrFailed()
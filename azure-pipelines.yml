# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
variables:
  - group: WOWE2EAPIAUTOMATION
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

parameters:
- name: baseUrl
  displayName: Base URL
  type: string
  default: https://uatsite.woolworths.com.au/
  values:
  - https://uatsite.woolworths.com.au/
  - https://wowguiaae.wowdevaae-ase.p.azurewebsites.net/
  - https://woolworths.com.au/
  - https://stagingsite.woolworths.com.au
  - https://preprodsite.woolworths.com.au

- name: browser
  displayName: Browser
  type: string
  default: chrome
  values:
  - chrome
  - edge
  - firefox
  - electron

trigger:
  - main

pool:
  name: wlx-ubuntu1804

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "14.x"
    displayName: "Install Node.js"
  - script: |
      npm install
      npm test -- --config baseUrl=${{ parameters.baseUrl }} --browser ${{ parameters.browser }}
      npm run allure:generate
    displayName: "Npm install and test"

  - task: AzureCLI@2
    condition: succeededOrFailed()
    displayName: "Download Report History"
    inputs:
      azureSubscription: "WOWDEVTEST-Trader-Woolworths Online"
      scriptType: "pscore"
      scriptLocation: "inlineScript"
      inlineScript: |
        az config set extension.use_dynamic_install=yes_without_prompt
        echo '============================================ Retrieving history from blob =================================='
        az storage blob directory download -c '$web' --account-name $(ACCOUNTNAMEDEV) --account-key $(ACCOUNTKEYDEV) -s history -d 'cypress/allure-results' --recursive
      powerShellErrorActionPreference: "continue"

  - task: Npm@1
    condition: succeededOrFailed()
    inputs:
      command: custom
      customCommand: run allure:generate
    displayName: "Generate Allure Results"

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: 'JUnit'
      testResultsFiles: '**/results-*.xml'
      testRunTitle: WOWE2EAPI-$(Build.BuildNumber)
      mergeTestResults: true
      searchFolder: '$(System.DefaultWorkingDirectory)/cypress/results'
    displayName: "Publish Test Results"

  - task: AzureCLI@2
    displayName: "Upload Allure Reports"
    condition: succeededOrFailed()
    inputs:
      azureSubscription: "WOWDEVTEST-Trader-Woolworths Online"
      scriptType: "pscore"
      scriptLocation: "inlineScript"
      inlineScript: |
        echo '============================================ Uploading run results to blob storage =================================='
        az storage blob upload-batch -d '$web/$(Build.BuildId)' -s allure-report --account-name $(ACCOUNTNAMEDEV) --account-key $(ACCOUNTKEYDEV)
        echo 'Report location is https://wowe2eautomation.z8.web.core.windows.net/$(Build.BuildId)/'
        az storage blob upload-batch -d '$web/history' -s allure-report/history --account-name $(ACCOUNTNAMEDEV) --account-key $(ACCOUNTKEYDEV)
        echo 'Uploaded history to blob storage...'
      powerShellErrorActionPreference: "continue"

  - task: Bash@3
    condition: eq(variables.isMain, true)
    inputs:
      targetType: 'inline'
      script: |
        # Write your commands here
        echo $(Build.BuildId)
        curl -X POST -H 'Content-type: application/json' --data '{
        "blocks": [
        { 
            "type": "section",
            "text":
            {
                "type": "mrkdwn",
                "text": "Build \"$(Build.SourceVersionMessage)\" *$(Agent.JobStatus)*"
            }
        },
        {
            "type": "actions",
            "elements": [
            {
                "type": "button",
                "text":
                {
                    "type": "plain_text",
                    "text": "Allure Report",
                    "emoji": true
                },
                "url": "https://wowe2eautomation.z8.web.core.windows.net/$(Build.BuildId)/"
            },
            {
                "type": "button",
                "text":
                {
                    "type": "plain_text",
                    "text": "Pipeline Results",
                    "emoji": true
                },
                "url": "https://wowonline.visualstudio.com/Woolworths%20Online/_build/results?buildId=$(Build.BuildId)&view=results"
            }]
        }]}' https://hooks.slack.com/services/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


   - powershell: |
      $minLastUpdatedDate = Get-Date (Get-Date).AddDays(-1) -Format s
      $maxLastUpdatedDate = Get-Date -Format s
      $queryString = "runTitle=WOWE2EAPI-$(Build.BuildNumber)&minLastUpdatedDate=$minLastUpdatedDate&maxLastUpdatedDate=$maxLastUpdatedDate&buildIds=$(Build.BuildId)&api-version=5.0-preview.2&`$top=1";
      $testRuns = Invoke-RestMethod -Uri "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/test/runs?$queryString" `
        -Method Get `
        -UseBasicParsing `
        -Authentication Bearer `
        -Token (ConvertTo-SecureString -String $(System.AccessToken) -AsPlainText -Force)

      $testRun = $testRuns.value[0]
      if ($testRun) {
        $testRunId = $testRun.id;
        $testResultDetailsUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_testManagement/runs?_a=runCharts&runId=$testRunId"

        $passedCount = ($testRun.runStatistics | Where-Object {$_.outcome -eq 'Passed'}).count
        $failedCount = ($testRun.runStatistics | Where-Object {$_.outcome -eq 'Failed'}).count
        $totalCount = $passedCount + $failedCount
        if ($totalCount -le 0) {
          return
        }
        $passRate = [math]::Round($passedCount / $totalCount * 100, 2)
        $color = 'good';
        if ($passRate -lt 50) {
          $color = 'danger';
          Write-Host "##vso[task.logissue type=error]Pass rate below 50% at $passRate% while testing ${{ parameters.TraderUrl }}"
        } elseif ($passRate -lt 90) {
          $color = 'warning';
          Write-Host "##vso[task.logissue type=warning]Pass rate $passRate% while testing ${{ parameters.TraderUrl }}"
        }

        $slackMessage = @{
            attachments = @(
              @{
                fallback = $testRun.name + " : Pass percentage $passRate%"
                title = $testRun.name
                title_link = $testResultDetailsUrl
                color = $color
                fields = @(
                    @{title = 'Passed - Scenarios'; value = $passedCount; short = 'true'},
                    @{title = 'Failed - Scenarios'; value = $failedCount; short = 'true'},
                    @{title = 'Total - Scenarios'; value = $totalCount; short = 'true'},
                    @{title = 'Pass percentage'; value = "$passRate%"; short = 'true'}
                )
              }
            )
        } | ConvertTo-Json -Depth 5

        Invoke-RestMethod -Uri '${{ parameters.SlackWebhookUrl }}' `
          -Method Post `
          -Body $slackMessage `
          -UseBasicParsing `
          -ContentType 'application/json'
      }
    displayName: 'Post test results to Slack'
    continueOnError: true
    condition: and(succeededOrFailed(), ne('${{ parameters.SlackWebhookUrl }}', ''))
